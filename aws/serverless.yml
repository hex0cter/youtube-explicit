service: youtube-explicit

plugins:
  - serverless-offline
  # - serverless-domain-manager
  # - serverless-dynamodb-local

custom:
  domain: solna.xyz
  # customDomain:
  #   domainName: api.${self:custom.domain}
  #   basePath: ${file(./serverless-config.yml):api.${opt:stage, self:provider.stage}}
  #   stage: ${opt:stage, self:provider.stage}
  #   certificateName: ${self:custom.domain}
  #   createRoute53Record: true

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-north-1
  memorySize: 128
  timeout: 3
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:service}-${opt:stage, self:provider.stage}-*
  environment:
    SERVICE_NAME: ${self:service}
    STAGE: ${opt:stage, self:provider.stage}
    DOMAIN_NAME: ${self:custom.domain}

functions:
  fetchPlaylists:
    handler: api/fetchPlaylists.handler
    name: ${self:service}-${opt:stage, self:provider.stage}-FetchPlaylists
    events:
      - http:
          path: /playlists
          method: get
          cors: true
  updatePlaylists:
    handler: api/updatePlaylists.handler
    name: ${self:service}-${opt:stage, self:provider.stage}-UpdatePlaylists
    events:
      - http:
          path: /playlists
          method: post
          cors: true
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage, self:provider.stage}-Playlists
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
